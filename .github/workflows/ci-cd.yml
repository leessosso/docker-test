name: CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

env:
  ACTIONS_STEP_DEBUG: true # 디버그 로깅 활성화

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Build project
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/

  docker-build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/franchise-website:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/franchise-website:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/franchise-website:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/franchise-website:buildcache,mode=max

  deploy:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy deployment files via SSH
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          password: ${{ secrets.SSH_PASSWORD }}
          source: "docker-compose.prod.yml,nginx.conf,deploy.sh,.env.example"
          target: "C:\\Users\\lee\\franchise-website"
          strip_components: 0

      - name: Execute deployment with PowerShell
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            cd C:\\Users\\lee\\franchise-website

            # PowerShell을 사용하여 Docker 명령어 직접 실행
            powershell -Command "& {
              Write-Host '배포 시작...'
              
              # Docker 명령어 실행
              docker pull %DOCKER_HUB_USERNAME%/franchise-website:latest
              docker-compose -f docker-compose.prod.yml down
              docker-compose -f docker-compose.prod.yml up -d
              
              # 컨테이너 상태 확인
              Start-Sleep -Seconds 5
              $container = docker ps -q -f name=franchise-website
              if ($container) {
                Write-Host '컨테이너가 정상적으로 실행 중입니다.'
              } else {
                Write-Host '오류: 컨테이너가 실행되지 않았습니다.'
                docker logs franchise-website
                exit 1
              }
              
              # 사용하지 않는 이미지 정리
              docker image prune -af --filter 'until=24h'
              
              Write-Host '배포가 완료되었습니다!'
            }"
